---
- name: Configure BP MC Connections
  hosts: all
  become: yes
  vars:
    interface_1: "eno12399np0"
    interface_2: "ens3f0np0"
    subnet: "10.70.9.0/24"
    bond_name: bondMcast
    interface_P: "eno12399np0"
    interface_S: "ens3f0np0"
    subnet_P: "10.70.9.0/24"
    subnet_S: "10.80.9.0/24"
    conn_P: connection-MC-P
    conn_S: connection-MC-S
  tasks:
    - name: Delete {{ conn_P }}
      shell: |
        for conn in $(nmcli -t -f NAME connection show | grep "{{ conn_P }}"); do
            nmcli connection delete "$conn"
        done
        nmcli connection delete {{ interface_P }}
        nmcli connection delete Connection-MC-P
      ignore_errors: yes

    - name: Delete {{ conn_S }}
      shell: |
        for conn in $(nmcli -t -f NAME connection show | grep "{{ conn_S }}"); do
            nmcli connection delete "$conn"
        done
        nmcli connection delete {{ interface_S }}
        nmcli connection delete Connection-MC-S
      ignore_errors: yes

    - name: Get the IP, Gateway, DNS, Domain, and Searches
      shell: |
        ip_addr=$(nmcli -t -f IP4.ADDRESS dev show | grep 10.17 | cut -d: -f2)
        echo -e "IP_ADDR=$ip_addr"
      register: network_info

    - name: Debug network info output
      debug:
        var: network_info.stdout_lines

    - name: Set variables from the network info
      set_fact:
        ip_addr: "{{ network_info.stdout_lines[0].split('=')[1] | default('') }}"

    - name: Fail if any network variable is empty
      fail:
        msg: "One or more network variables are empty. Please check the network configuration."
      when: ip_addr == ''

    - name: Extract First three octets from the subnet and last octet of management interface IP
      set_fact:
        # subnet_first_3_octet_P: "{{ subnet_P | regex_replace('.0/.*', '') }}"
        # subnet_first_3_octet_S: "{{ subnet_S | regex_replace('.0/.*', '') }}"
        last_octet: "{{ ip_addr | regex_replace('.*\\.', '') | regex_replace('/.*', '') }}"

    # - name: Create Connection {{ conn_P }} if not exists
    #   shell: |
    #     nmcli con add type ethernet connection.id {{ conn_P }} ifname {{ interface_P }}
    #   args:
    #     executable: /bin/bash

    # - name: Create Connection {{ conn_S }} if not exists
    #   shell: |
    #     nmcli con add type ethernet connection.id {{ conn_S }} ifname {{ interface_S }}
    #   args:
    #     executable: /bin/bash

    - name: Create bond {{ bond_name }}
      shell: |
        nmcli con add type bond connection.id {{ bond_name }} ifname {{ bond_name }} mode active-backup
        nmcli con add type ethernet slave-type bond connection.id {{ bond_name }}-interface-1 ifname {{ interface_1 }} master {{ bond_name }}
        nmcli con add type ethernet slave-type bond connection.id {{ bond_name }}-interface-2 ifname {{ interface_2 }} master {{ bond_name }}
      when: bond_check.rc != 0 and bond_check.stdout == ""
      args:
        executable: /bin/bash

    - name: Configure bond {{ bond_name }}
      shell: |
        nmcli con mod {{ bond_name }} bond.options "primary={{ interface_1 }},mode=active-backup,miimon=100,updelay=100"
        nmcli con mod {{ bond_name }} ipv4.addresses {{ subnet_first_3_octet }}.{{ last_octet }}/24 
        nmcli con mod {{ bond_name }} ipv4.method manual
        nmcli con mod {{ bond_name }} connection.autoconnect yes
        nmcli con mod {{ bond_name }} ipv6.method disabled
        nmcli con mod {{ bond_name }} ipv4.routes "10.70.51.0/24 10.70.9.254"
        nmcli con mod {{ bond_name }} +ipv4.routes "10.80.51.0/24 10.70.9.254" 
        nmcli con up {{ bond_name }}
      args:
        executable: /bin/bash

    # - name: Configure Connection {{ conn_P }}
    #   shell: |
    #     nmcli con mod {{ conn_P }} ipv4.addresses {{ subnet_first_3_octet_P }}.{{ last_octet }}/24 
    #     nmcli con mod {{ conn_P }} ipv4.method manual
    #     nmcli con mod {{ conn_P }} connection.autoconnect yes
    #     nmcli con mod {{ conn_P }} ipv6.method disabled
    #     nmcli con up {{ conn_P }}
    #   args:
    #     executable: /bin/bash

    # - name: Configure Connection {{ conn_S }}
    #   shell: |
    #     nmcli con mod {{ conn_S }} ipv4.addresses {{ subnet_first_3_octet_S }}.{{ last_octet }}/24 
    #     nmcli con mod {{ conn_S }} ipv4.method manual
    #     nmcli con mod {{ conn_S }} connection.autoconnect yes
    #     nmcli con mod {{ conn_S }} ipv6.method disabled
    #     nmcli con up {{ conn_S }}
    #   args:
    #     executable: /bin/bash

    - name: Restart NetworkManager service
      systemd:
        name: NetworkManager
        state: restarted
