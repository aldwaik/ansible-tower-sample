---
- name: Configure XOS Management bond
  hosts: all
  become: yes
  vars:
    interface: "ens192"
    connection_old: "ens192"
    connection_new: "Connection-MGMT"
  tasks:
    - name: Check if the new connection exists
      command: nmcli connection show {{ connection_new }}
      register: new_connection
      ignore_errors: yes

    - name: Check if the old connection exists
      command: nmcli connection show {{ connection_old }}
      register: old_connection
      ignore_errors: yes

    - name: Set the connection variable
      set_fact:
        connection: "{{ {{ connection_new }} if new_connection.stat.exists else {{ connection_old }} }}"

    - name: Debug connection variable
      debug:
        var: connection.stdout_lines

    - name: Remove 'KS-RHEL94' line from hostname fike if detected
      lineinfile:
        path: /etc/hostname
        regexp: 'KS-RHEL94'
        state: absent

    - name: set hostname from DCHP
      shell: |
        nmcli con mod {{ connection }} ipv4.dhcp-hostname yes

    - name: Restart NetworkManager service
      systemd:
        name: NetworkManager
        state: restarted

    - name: Check current hostname
      command: hostname
      register: current_hostname

    - name: Check hostname in file
      command: cat /etc/hostname
      register: file_hostname
      failed_when: false

    - name: Debug current hostname
      debug:
        var: current_hostname

    - name: Debug /etc/hostname
      debug:
        var: file_hostname

    - name: Set the hostname from DHCP if different
      shell: |
        hostnamectl set-hostname $(hostname)
      args:
        executable: /bin/bash
      when: current_hostname.stdout != file_hostname.stdout

    - name: Get the IP, Gateway, DNS, Domain, and Searches
      shell: |
        ip_addr=$(nmcli -t -f IP4.ADDRESS dev show | grep 10.17 | cut -d: -f2)
        # gw=$(nmcli -t -f IP4.GATEWAY dev show {{ interface }} | cut -d: -f2)
        # dns=$(nmcli -t -f IP4.DNS dev show {{ interface }} | cut -d: -f2)
        # domain=$(nmcli -t -f IP4.DOMAIN dev show {{ interface }} | cut -d: -f2)
        # searches=$(nmcli -t -f IP4.SEARCHES dev show {{ interface }} | cut -d: -f2)
        # echo -e "IP_ADDR=$ip_addr\nGW=$gw\nDNS=$dns\nDOMAIN=$domain\nSEARCHES=$searches"
        echo -e "IP_ADDR=$ip_addr"
      register: network_info

    - name: Debug network info output
      debug:
        var: network_info.stdout_lines

    - name: Set variables from the network info
      set_fact:
        ip_addr: "{{ network_info.stdout_lines[0].split('=')[1] | default('') }}"
        #gw: "{{ '10.17.11.254' if network_info.stdout_lines[0].split('=')[1].startswith('10.17.11') else '10.17.12.254' }}"
        #dns: "{{ '10.17.11.240' if network_info.stdout_lines[0].split('=')[1].startswith('10.17.11') else '10.17.12.240' }}"
        gw: "10.17.15.254"
        dns: "10.17.15.240"
        domain: "alrawabi.local"

    - name: Fail if any network variable is empty
      fail:
        msg: "One or more network variables are empty. Please check the network configuration."
      when: ip_addr == '' or gw == '' or dns == '' or domain == ''

    # - name: Stop execution
    #   meta: end_play

    - name: Configure bond-mgmt
      shell: |
        nmcli con mod {{ connection }} ipv4.dhcp-hostname no
        nmcli con mod {{ connection }} ipv4.addresses "{{ ip_addr }}"
        nmcli con mod {{ connection }} ipv4.gateway "{{ gw }}"
        nmcli con mod {{ connection }} ipv4.dns "{{ dns }}"
        nmcli con mod {{ connection }} ipv4.dns-search "{{ domain }}"
        nmcli con mod {{ connection }} ipv4.method manual
        nmcli con mod {{ connection }} connection.autoconnect yes
        nmcli con mod {{ connection }} ipv6.method disabled
        nmcli con mod {{ connection }} connection.id "Connection-MGMT"
        nmcli con up {{ connection }}
      args:
        executable: /bin/bash

    - name: Restart NetworkManager service (second time)
      systemd:
        name: NetworkManager
        state: restarted
