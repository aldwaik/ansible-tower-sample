---
- name: Configure network interfaces
  hosts: all
  become: yes
  tasks:
    - name: Get the IP address of eno8303
      shell: |
        ip -4 addr show eno8303 | grep -oP '(?<=inet\s)\d+(\.\d+){3}'
      register: ip_address

    - name: Save the IP address to a variable
      set_fact:
        eno8303_ip: "{{ ip_address.stdout }}"

    - name: Remove eno8303 configuration from /etc/network/interfaces
      lineinfile:
        path: /etc/network/interfaces
        regexp: '^(iface|allow-hotplug) eno8303'
        state: absent

    - name: Check if bond-MGMT connection exists
      shell: nmcli connection show bond-MGMT
      register: bond_check
      ignore_errors: yes

    - name: Create bond connection if not exists
      shell: |
        nmcli connection add type bond ifname bond0 con-name bond-MGMT mode active-backup
        nmcli connection modify bond-MGMT ipv4.addresses {{ eno8303_ip }}/24
        nmcli connection modify bond-MGMT ipv4.gateway 10.17.5.254
        nmcli connection modify bond-MGMT ipv4.dns 10.17.5.240
        nmcli connection modify bond-MGMT ipv4.dns-search alrawabi.local
        nmcli connection modify bond-MGMT ipv4.method manual
      when: bond_check.rc != 0

    - name: Check if eno8303-slave connection exists
      shell: nmcli connection show eno8303-slave
      register: eno8303_slave_check
      ignore_errors: yes

    - name: Add eno8303 to bond if not exists
      shell: nmcli connection add type ethernet ifname eno8303 con-name eno8303-slave master bond0
      when: eno8303_slave_check.rc != 0

    - name: Check if eno8403-slave connection exists
      shell: nmcli connection show eno8403-slave
      register: eno8403_slave_check
      ignore_errors: yes

    - name: Add eno8403 to bond if not exists
      shell: nmcli connection add type ethernet ifname eno8403 con-name eno8403-slave master bond0
      when: eno8403_slave_check.rc != 0

    - name: Bring up the bond connection
      shell: nmcli connection up bond-MGMT

    - name: Check if networking service is running
      shell: systemctl is-active networking
      register: networking_service
      ignore_errors: yes

    - name: Stop and disable networking service if running
      systemd:
        name: networking
        state: stopped
        enabled: no
      when: networking_service.stdout == 'active'

    - name: Reboot the server if networking service was running
      reboot:
      when: networking_service.stdout == 'active'